// Externalized registration scripts to satisfy CSP (no inline JS)
(function(){
  // Legacy form UX enhancements
  function setupLegacy(){
    const pwd = document.getElementById('reg_password');
    const cpwd = document.getElementById('reg_confirm_password');
    const toggle = document.getElementById('reg_toggle_pwd');
    const toggleC = document.getElementById('reg_toggle_confirm');
    const submitBtn = document.getElementById('regSubmit');
    const err = document.getElementById('reg_error');
    const strength = document.getElementById('pwStrength');
    const strengthText = document.getElementById('pwStrengthText');
    if (!submitBtn) return;

    function setErr(msg){ if(!err) return; if(!msg){ err.classList.add('hidden'); err.textContent=''; } else { err.textContent=msg; err.classList.remove('hidden'); }}
    function toggleInputVisibility(input, btn){ if(!input||!btn) return; btn.addEventListener('click', e=>{ e.preventDefault(); const show=input.type==='password'; input.type=show?'text':'password'; btn.textContent=show?'Hide':'Show'; btn.setAttribute('aria-pressed', show?'true':'false'); }); }
    function scorePassword(s){ let score=0; if(!s) return 0; if(s.length>=8) score++; if(/[a-z]/.test(s)&&/[A-Z]/.test(s)) score++; if(/\d/.test(s)) score++; if(/[^A-Za-z0-9]/.test(s)) score++; return Math.min(score,4);}    
    function updateStrength(){ const s=scorePassword(pwd?pwd.value:''); if(strength){ strength.value=s; strength.setAttribute('aria-valuenow', String(s)); strength.className='w-full h-2 rounded mt-1 strength-'+s; } if(strengthText){ const labels=['Very weak','Weak','Okay','Good','Strong']; strengthText.textContent=labels[s]; } }
    function validateForm(){ setErr(''); updateStrength(); const emailEl=document.getElementById('reg_email'); const usernameEl=document.getElementById('reg_username'); const usernameVal=usernameEl?usernameEl.value.trim():''; const emailVal=emailEl?emailEl.value.trim():''; const pwdVal=pwd?pwd.value:''; const cpwdVal=cpwd?cpwd.value:''; if(!usernameVal){ setErr('Username is required.'); usernameEl&&usernameEl.setAttribute('aria-invalid','true'); return false;} else { usernameEl&&usernameEl.removeAttribute('aria-invalid'); } if(!emailVal){ setErr('Email is required.'); emailEl&&emailEl.setAttribute('aria-invalid','true'); return false;} else { emailEl&&emailEl.removeAttribute('aria-invalid'); } if(!pwdVal){ setErr('Password is required.'); pwd&&pwd.setAttribute('aria-invalid','true'); return false;} else { pwd&&pwd.removeAttribute('aria-invalid'); } if(pwdVal&&cpwdVal&&pwdVal!==cpwdVal){ cpwd.setCustomValidity('Passwords do not match.'); setErr('Passwords do not match.'); cpwd.setAttribute('aria-invalid','true'); return false;} else { cpwd&&cpwd.setCustomValidity(''); cpwd&&cpwd.removeAttribute('aria-invalid'); } if(pwdVal&&pwdVal.length<8){ pwd.setCustomValidity('Password must be at least 8 characters.'); setErr('Password must be at least 8 characters.'); pwd.setAttribute('aria-invalid','true'); return false;} else { pwd&&pwd.setCustomValidity(''); pwd&&pwd.removeAttribute('aria-invalid'); } if(emailVal && !/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(emailVal)){ setErr('Enter a valid email address.'); emailEl&&emailEl.setAttribute('aria-invalid','true'); return false;} else { emailEl&&emailEl.removeAttribute('aria-invalid'); } return true; }

    toggleInputVisibility(pwd,toggle); toggleInputVisibility(cpwd,toggleC);
    ;[pwd,cpwd,document.getElementById('reg_email'),document.getElementById('reg_username')].forEach(el=>{ if(!el) return; el.addEventListener('input',()=>{ try{ const ok=validateForm(); submitBtn.disabled=!ok; }catch(e){ submitBtn.disabled=true; } }); });
    submitBtn.disabled=true; try{ submitBtn.disabled=!validateForm(); }catch(e){ submitBtn.disabled=true; }
    setTimeout(()=>{ try{ submitBtn.disabled=!validateForm(); }catch(e){} },150);
    window.submitRegister=function(){ const ok=validateForm(); if(!ok){ try{ if(err&&err.textContent) err.focus(); }catch(e){} return;} submitBtn.disabled=true; const prev=submitBtn.textContent; submitBtn.textContent='Creatingâ€¦'; try{ document.getElementById('registerForm').submit(); } finally { setTimeout(()=>{ try{ submitBtn.disabled=false; submitBtn.textContent=prev; }catch(e){} },2000);} };
  }

  function setupLegacyFormSubmit(){ const btn=document.getElementById('regSubmit'); if(!btn) return; btn.addEventListener('click', async ()=>{ try{ const get=id=> (document.getElementById(id)||{}).value || ''; const csrfEl=document.querySelector('input[name="csrf_token"]'); const params=new URLSearchParams(); params.append('username',get('reg_username')); params.append('email',get('reg_email')); params.append('employee_id',get('reg_employee')); params.append('mobile',get('reg_mobile')); params.append('password',get('reg_password')); params.append('confirm_password',get('reg_confirm_password')); params.append('csrf_token', csrfEl&&csrfEl.value ? csrfEl.value : 'test-csrf-token'); await fetch('/register',{ method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded'}, body: params.toString()}); }catch(e){} }); }

  function setupFlow(){ const step1=document.getElementById('step1'); const step2=document.getElementById('step2'); const step3=document.getElementById('step3'); const step1b=document.getElementById('step1b'); const register_success=document.getElementById('register_success'); const pi1=document.getElementById('pi1'); const pi2=document.getElementById('pi2'); const pi3=document.getElementById('pi3'); const s1emp=document.getElementById('step1_employee'); const s1mob=document.getElementById('step1_mobile'); const s1btn=document.getElementById('step1_lookup'); const s1msg=document.getElementById('step1_msg'); const s1bMobile=document.getElementById('step1b_mobile'); const s1bSend=document.getElementById('step1b_send'); const s1bBack=document.getElementById('step1b_back'); const s1bDisplay=document.getElementById('step1b_display'); const s1bMasked=document.getElementById('step1b_masked'); const s1bChange=document.getElementById('step1b_change'); const s1bEditWrap=document.getElementById('step1b_edit_wrap'); const s1bMsg=document.getElementById('step1b_msg'); const s1empWrap=document.getElementById('step1_employee_wrap'); const s1mobWrap=document.getElementById('step1_mobile_wrap'); const s1radios=document.querySelectorAll('input[name="has_emp_id"]'); const s2mob=document.getElementById('step2_mobile'); const s2otp=document.getElementById('step2_otp'); const s2mobMasked=document.getElementById('step2_mobile_masked'); const s2verify=document.getElementById('step2_verify'); const s2back=document.getElementById('step2_back'); const s2msg=document.getElementById('step2_msg'); const s2resend=document.getElementById('step2_resend'); const s3user=document.getElementById('step3_username'); const s3email=document.getElementById('step3_email'); const s3pwd=document.getElementById('step3_password'); const s3c=document.getElementById('step3_confirm'); const s3create=document.getElementById('step3_create'); const s3msg=document.getElementById('step3_msg'); const s3pwdToggle=document.getElementById('step3_toggle_pwd'); const s3cToggle=document.getElementById('step3_toggle_confirm'); const midWrap=document.getElementById('upload_intermediate'); const midFile=document.getElementById('mid_file'); const midUpload=document.getElementById('mid_upload'); const midMsg=document.getElementById('mid_msg'); let currentMobile=null; let hasEmployeePath=true; let totalSteps=3; let tempUploadId=null;
    function show(el){ if(el) el.classList.remove('hidden'); } function hide(el){ if(el) el.classList.add('hidden'); }
    function mark(step){ const activeCls='bg-[color:var(--brand-600)] text-white'; const idleCls='bg-[color:var(--border)] text-[color:var(--text-muted)]'; [pi1,pi2,pi3].forEach((n,i)=>{ if(!n) return; const idx=i+1; if(idx>totalSteps){ n.parentElement&&n.parentElement.classList.add('hidden'); return;} n.parentElement&&n.parentElement.classList.remove('hidden'); if(idx===step){ activeCls.split(' ').forEach(c=> n.classList.add(c)); idleCls.split(' ').forEach(c=> n.classList.remove(c)); } else { idleCls.split(' ').forEach(c=> n.classList.add(c)); activeCls.split(' ').forEach(c=> n.classList.remove(c)); } }); }
    function maskMobile(m){ if(!m) return ''; const d=m.replace(/[^0-9]/g,''); if(d.length<=4) return d; return '****'+d.slice(-4);} mark(1);
    function attachToggle(input,btn){ if(!input||!btn) return; btn.addEventListener('click',()=>{ const show=input.type==='password'; input.type=show?'text':'password'; btn.textContent=show?'Hide':'Show'; btn.setAttribute('aria-label', show?'Hide password':'Show password'); }); }
    attachToggle(s3pwd,s3pwdToggle); attachToggle(s3c,s3cToggle);
    async function postJson(url,body){ try{ const res=await fetch(url,{ method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(body)}); const parsed=await res.json().catch(()=>null); return { ok:res.ok, status:res.status, body:parsed }; }catch(e){ return { ok:false, msg:'network error' }; } }
    function updateStep1Mode(){ let mode='yes'; s1radios.forEach(r=>{ if(r.checked) mode=r.value; }); if(mode==='yes'){ s1empWrap&&s1empWrap.classList.remove('hidden'); s1mobWrap&&s1mobWrap.classList.add('hidden'); } else { s1empWrap&&s1empWrap.classList.add('hidden'); s1mobWrap&&s1mobWrap.classList.remove('hidden'); } }
    s1radios.forEach(r=> r.addEventListener('change', updateStep1Mode)); updateStep1Mode();
    s1btn&&s1btn.addEventListener('click', async ()=>{ s1msg.textContent='Processing...'; let hasId=true; s1radios.forEach(r=>{ if(r.checked) hasId=r.value==='yes'; }); hasEmployeePath=hasId; totalSteps=3; const empVal=(s1emp&&s1emp.value||'').trim(); const mobVal=(s1mob&&s1mob.value||'').trim(); if(hasId && !empVal){ s1msg.textContent='Please enter your Employee ID.'; return;} if(!hasId && !mobVal){ s1msg.textContent='Please enter your mobile number.'; return;} const lookupBody={ employee_id: hasId?empVal:'', mobile: hasId?'':mobVal }; const data=await postJson('/api/v1/auth/employee-lookup', lookupBody); if(data && (data.ok || (data.body && (data.body.mobile || data.body.username)))){ if(hasId){ const mobileFetched=(data.body&&data.body.mobile)||''; if(s1bMobile) s1bMobile.value=mobileFetched; if(s3user) s3user.value=(data.body&&data.body.username)||''; if(s3email) s3email.value=(data.body&&data.body.email)||''; if(s1bMasked) s1bMasked.textContent=maskMobile(mobileFetched); if(!mobileFetched){ s1bDisplay&&s1bDisplay.classList.add('hidden'); s1bEditWrap&&s1bEditWrap.classList.remove('hidden'); s1bMobile&&setTimeout(()=>s1bMobile.focus(),50); } else { s1bDisplay&&s1bDisplay.classList.remove('hidden'); s1bEditWrap&&s1bEditWrap.classList.add('hidden'); } hide(step1); show(step1b); s1msg.textContent=''; s1bMsg.textContent='Review or change the number, then send OTP.'; mark(1); } else { const mobile=lookupBody.mobile; const gen=await postJson('/api/v1/auth/generate-otp',{ mobile }); if(gen && gen.ok){ currentMobile=mobile; s2mob && (s2mob.value=mobile); s2mobMasked && (s2mobMasked.textContent=maskMobile(mobile)); s1msg.textContent='OTP sent to '+maskMobile(mobile); show(step2); hide(step1); mark(2); } else { s1msg.textContent=(gen && gen.body && gen.body.msg) || 'Failed to send OTP'; } } } else { s1msg.textContent=(data && (data.msg || (data.body && data.body.msg))) || 'Lookup failed'; } });
    function proceedAfterConfirm(mobile){ currentMobile=mobile; s2mob && (s2mob.value=mobile); s2mobMasked && (s2mobMasked.textContent=maskMobile(mobile)); show(step2); hide(step1b); mark(2); s2msg.textContent='OTP sent to '+maskMobile(mobile); }
    s1bChange&&s1bChange.addEventListener('click', ()=>{ s1bEditWrap&&s1bEditWrap.classList.remove('hidden'); s1bDisplay&&s1bDisplay.classList.add('hidden'); s1bMobile && (s1bMobile.value=''); setTimeout(()=> s1bMobile && s1bMobile.focus(),30); });
    s1bSend&&s1bSend.addEventListener('click', async ()=>{ const mob=(s1bMobile && s1bMobile.value.trim()) || ''; if(!mob){ s1bMsg.textContent='Mobile number required.'; return;} s1bMsg.textContent='Preparing...'; const empVal=(s1emp && s1emp.value.trim()) || ''; const update=await postJson('/api/v1/auth/employee-lookup',{ employee_id: empVal, mobile: mob }); if(!(update && (update.ok || (update.body && update.body.mobile)))){ s1bMsg.textContent='Lookup/update failed'; return;} s1bMsg.textContent='Sending OTP...'; const gen=await postJson('/api/v1/auth/generate-otp',{ mobile: mob }); if(gen && gen.ok){ s1bMsg.textContent='OTP sent'; proceedAfterConfirm(mob); } else { s1bMsg.textContent=(gen && gen.body && gen.body.msg) || 'Failed to send OTP'; } });
    s1bBack&&s1bBack.addEventListener('click', ()=>{ show(step1); hide(step1b); mark(1); s1bMsg.textContent=''; });
    s2back&&s2back.addEventListener('click', ()=>{ hide(step2); show(step1); mark(1); });
    let resendUntil=0; function updateResendButton(){ if(!s2resend) return; const now=Date.now(); if(now<resendUntil){ const remain=Math.ceil((resendUntil-now)/1000); s2resend.disabled=true; s2resend.textContent='Resend ('+remain+'s)'; } else { s2resend.disabled=false; s2resend.textContent='Resend OTP'; } } function startResendCooldown(seconds){ resendUntil=Date.now()+seconds*1000; updateResendButton(); const ticker=setInterval(()=>{ updateResendButton(); if(Date.now()>=resendUntil) clearInterval(ticker); },900);} startResendCooldown(30);
    s2resend&&s2resend.addEventListener('click', async ()=>{ if(s2resend.disabled) return; const mobile=(s2mob && s2mob.value.trim()) || currentMobile; if(!mobile){ s2msg.textContent='Missing mobile number.'; return;} s2msg.textContent='Sending new OTP...'; const gen=await postJson('/api/v1/auth/generate-otp',{ mobile }); if(gen && gen.ok){ s2msg.textContent='New OTP sent to '+maskMobile(mobile)+'.'; startResendCooldown(30);} else { s2msg.textContent=(gen && gen.body && gen.body.msg) || 'Failed to resend OTP'; } });
    s2verify&&s2verify.addEventListener('click', async ()=>{ s2msg.textContent='Verifying...'; const body={ mobile:(s2mob && s2mob.value || '').trim(), otp:(s2otp && s2otp.value || '').trim() }; const data=await postJson('/api/v1/auth/verify-otp', body); if(data && data.ok){ s2msg.textContent='OTP verified'; hide(step2); if(hasEmployeePath){ show(step3); mark(3); } else { show(midWrap); } } else { s2msg.textContent=data.msg || 'OTP verification failed'; } });
    s3create&&s3create.addEventListener('click', async ()=>{ s3msg.textContent='Creating account...'; if((s3pwd && s3pwd.value)!==(s3c && s3c.value)){ s3msg.textContent='Passwords do not match'; return;} const body={ username:(s3user && s3user.value || '').trim(), email:(s3email && s3email.value || '').trim(), password:(s3pwd && s3pwd.value || ''), mobile:(s2mob && s2mob.value || '').trim(), employee_id:(s1emp && s1emp.value || '').trim(), temp_upload_id: tempUploadId }; const data=await postJson('/api/v1/auth/create-account', body); if(data && (data.ok || data.user_id)){ s3msg.textContent='Account created. Awaiting admin verification.'; hide(step3); show(register_success); mark(3); } else { s3msg.textContent=data.msg || 'Could not create account'; } });
    midUpload&&midUpload.addEventListener('click', async ()=>{ if(!midFile || !midFile.files || !midFile.files.length){ midMsg.textContent='Please select a PDF file.'; return;} const f=midFile.files[0]; const fd=new FormData(); fd.append('file', f, f.name); midMsg.textContent='Uploading...'; try{ const res=await fetch('/api/v1/auth/upload-temp-id',{ method:'POST', body: fd }); const data=await res.json().catch(()=>({})); if(res.ok && data.temp_upload_id){ tempUploadId=data.temp_upload_id; midMsg.textContent='Document uploaded. Continue to create your account.'; hide(midWrap); show(step3); mark(3); } else { midMsg.textContent=data.msg || 'Upload failed'; } } catch(e){ midMsg.textContent='Upload error'; } });
  }

  if(document.readyState==='loading'){ document.addEventListener('DOMContentLoaded', ()=>{ setupLegacy(); setupLegacyFormSubmit(); setupFlow(); }); } else { setupLegacy(); setupLegacyFormSubmit(); setupFlow(); }
})();
